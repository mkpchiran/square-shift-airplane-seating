/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'maven-publish'
    id 'jacoco'
    id 'com.github.sherter.google-java-format' version "${googleJavaFormatterVersion}"
    id "org.sonarqube" version "${sonarVersion}"
    id 'info.solidsoft.pitest' version "${pitestVersion}"
    id 'org.owasp.dependencycheck' version "${owaspVersion}"
    id "com.github.spotbugs" version "${spotBugVersion}"
}

version = libVersion
sourceCompatibility = "11"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenLocal()
    mavenCentral()
}

dependencies {

	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	
	testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
	testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation "org.mockito:mockito-core:3.+"
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    implementation "com.google.inject:guice:${guiceVersion}"

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:30.1.1-jre'
}

jacoco {
    toolVersion = "${jacocoVersion}"
    reportsDir(file("$buildDir/jacoco"))
}

googleJavaFormat {
    toolVersion = "${googleFormatToolVersion}"
}

spotbugs {
    toolVersion = "${spotBugToolVersion}"
    ignoreFailures = false
    showStackTraces = true
}

task javadocs(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.runtimeClasspath

}

task packageJavadoc(type: Jar) {
    classifier 'javadoc'
    from javadoc
}

task sourceJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allJava
}

jacocoTestReport {
    dependsOn test
    mustRunAfter test
    reports {
        xml.enabled true
        xml.destination file("$buildDir/jacoco/xml/jacoco.xml")
        html.destination file("${buildDir}/reports/coverage/test")
    }
    executionData(test)
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId "${group}"
            artifactId 'core'
            version "${version}"

            from components.java
            artifact tasks.sourceJar
        }
    }
}

sonarqube {
    // this is silly but specifying the actual settings file is not supported
    properties {
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.projectVersion', "${libVersion}"
        def props = new Properties()
        file("sonar.properties").withInputStream { props.load(it) }
        props.each {
            property("${it.key}", "${it.value}")
        }
    }
}
tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
targetCompatibility = JavaVersion.VERSION_11
